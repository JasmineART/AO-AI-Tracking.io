rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isValidString(text, minLen, maxLen) {
      return text is string && text.size() >= minLen && text.size() <= maxLen;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$');
    }
    
    // User data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) 
                    && isValidEmail(request.resource.data.email)
                    && isValidString(request.resource.data.displayName, 1, 100);
      allow update: if isOwner(userId)
                    && (!request.resource.data.keys().hasAny(['uid', 'email']) 
                        || request.resource.data.email == resource.data.email);
      allow delete: if isOwner(userId);
      
      // Sensitive user data subcollection
      match /sensitive/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Projects
    match /projects/{projectId} {
      allow read: if isSignedIn() 
                  && (resource.data.owner == request.auth.uid 
                      || request.auth.uid in resource.data.get('members', []));
      allow create: if isSignedIn() 
                    && request.resource.data.owner == request.auth.uid
                    && isValidString(request.resource.data.name, 1, 200);
      allow update: if isSignedIn() 
                    && resource.data.owner == request.auth.uid;
      allow delete: if isSignedIn() 
                    && resource.data.owner == request.auth.uid;
    }
    
    // AI Systems
    match /aiSystems/{systemId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isSignedIn() 
                    && request.resource.data.userId == request.auth.uid
                    && isValidString(request.resource.data.name, 1, 200);
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Metrics and analytics (read-only for users, write through cloud functions)
    match /metrics/{metricId} {
      allow read: if isSignedIn();
      allow write: if false; // Only cloud functions can write
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
